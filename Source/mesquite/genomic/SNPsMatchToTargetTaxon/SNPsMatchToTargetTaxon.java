/* Mesquite source code.  Copyright 1997 and onward, W. Maddison and D. Maddison. 


Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. 
The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.
Perhaps with your help we can be more than a few, and make Mesquite better.

Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.
Mesquite's web site is http://mesquiteproject.org

This source code and its compiled class files are free and modifiable under the terms of 
GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)
 */
package mesquite.genomic.SNPsMatchToTargetTaxon;
/*~~  */

import java.util.*;
import java.awt.*;

import mesquite.lib.*;
import mesquite.lib.characters.*;
import mesquite.lib.duties.*;
import mesquite.treefarm.lib.PatristicDistances;
import mesquite.categ.lib.*;

/* ======================================================================== */
public class SNPsMatchToTargetTaxon extends NumberForTaxon {
	public void getEmployeeNeeds(){  //This gets called on startup to harvest information; override this and inside, call registerEmployeeNeed
		EmployeeNeed e = registerEmployeeNeed(MatrixSourceCoord.class, getName() + "  needs a source of characters.",
				"The source of characters is arranged initially");
		EmployeeNeed e2 = registerEmployeeNeed(OneTreeSource.class, getName() + "  needs a current tree.",
				"The source of current tree is arranged initially");
	}
	/*.................................................................................................................*/
	MatrixSourceCoord matrixSourceTask;
	Taxa currentTaxa = null;
	MCharactersDistribution observedStates =null;
	OneTreeSource treeTask;
	/*.................................................................................................................*/
	public boolean startJob(String arguments, Object condition, boolean hiredByName) {
		matrixSourceTask = (MatrixSourceCoord)hireCompatibleEmployee(MatrixSourceCoord.class, CategoricalState.class, "Source of character matrix (for proportion missing)"); 
		if (matrixSourceTask==null)
			return sorry(getName() + " couldn't start because no source of character matrices was obtained.");
		treeTask = (OneTreeSource)hireEmployee(OneTreeSource.class, "Source of tree for patristic distances");
	//	addMenuItem("Set Options for SNP matches...", MesquiteModule.makeCommand("setOptions", this));
		return true;
	}
	public void endJob(){
		for (int i = 0; i< getProject().getNumberTaxas(); i++)
			getProject().getTaxa(i).removeListener(this);
		super.endJob();
	}
	/* ---------------------------------------------------------*/
	/** passes which object changed, along with optional Notification object with details (e.g., code number (type of change) and integers (e.g. which character))*/
	public void changed(Object caller, Object obj, Notification notification){
		outputInvalid();
		parametersChanged();
	}

	/*.................................................................................................................*/
	/** Generated by an employee who quit.  The MesquiteModule should act accordingly. */
	public void employeeQuit(MesquiteModule employee) {
		if (employee == matrixSourceTask)  // character source quit and none rehired automatically
			iQuit();
	}
	/*.................................................................................................................*/
	/** returns whether this module is requesting to appear as a primary choice */
	public boolean requestPrimaryChoice(){
		return false;  
	}
	public boolean isSubstantive(){
		return true;
	}   	 
	/*.................................................................................................................*/
	public boolean isPrerelease() {
		return true; //Debugg.println just for play; this should likely not be released!!
	}

	/*.................................................................................................................*/
	/** Called to provoke any necessary initialization.  This helps prevent the module's intialization queries to the user from
   	happening at inopportune times (e.g., while a long chart calculation is in mid-progress)*/
	public void initialize(Taxa taxa){
		currentTaxa = taxa;
		matrixSourceTask.initialize(currentTaxa);
	}
	/*.................................................................................................................*/
	double[][] patDistances;
	PatristicDistances patristicDistances;
	String taxonName = "";

	public void calculateNumber(Taxon taxon, MesquiteNumber result, MesquiteString resultString){
		if (result==null)
			return;
		clearResultAndLastResult(result);
		Taxa taxa = taxon.getTaxa();
		taxa.addListener(this); //this doesn't add if it's already there; to respond to change of selection
		if (taxa.numberSelected() != 1)  //Debugg.println tell user why failed
			return;
		int it = taxa.whichTaxonNumber(taxon);
		if (taxa != currentTaxa || observedStates == null ) {
			observedStates = matrixSourceTask.getCurrentMatrix(taxa);
			currentTaxa = taxa;
		}
		if (observedStates==null)
			return;
		int numChars = observedStates.getNumChars();
		int numTaxa = taxa.getNumTaxa();

		if (numChars==0)
			return;
		Tree tree;

		if (treeTask!=null && scaleByPatristic.getValue()) {
			tree = treeTask.getTree(taxa);
			if (patristicDistances == null)
				patristicDistances = new PatristicDistances();
			patDistances = patristicDistances.getDistancesWithLengths(tree, numTaxa, patDistances); //Debugg.println NOTE: this may not work if not all taxa in tree
			if (patDistances == null)
				return;
		}
		CharacterData ddata = observedStates.getParentData();


		if (!(ddata instanceof CategoricalData))
			return;
		CategoricalData data = (CategoricalData)ddata;
		CharInclusionSet incl = null;
		if (data !=null)
			incl = (CharInclusionSet)data.getCurrentSpecsSet(CharInclusionSet.class);
		CategoricalState cs = null;
		CategoricalState csTarget = null;
		double count = 0;
		double distance = 0;
		int totApplicable = 0;
		int target = taxa.firstSelected();
		taxonName = taxa.getTaxonName(target);
		for (int ic=0; ic<numChars; ic++) {
			if ((incl == null || incl.isBitOn(ic)) && data.charIsVariable(ic, false)){
				cs = (CategoricalState)observedStates.getCharacterState(cs, ic, it);
				csTarget =(CategoricalState)observedStates.getCharacterState(csTarget, ic, target);
				if (!cs.isInapplicable() && !csTarget.isInapplicable()) {
					// does it match target taxon?
					if (cs.equals(csTarget)) {
						count++; //another SNP match
					}
				}
				totApplicable++;
			}
		}
		result.setValue(count);
		if (useProportion.getValue()==1) {
			if (totApplicable == 0)
				result.setToUnassigned();
			else
				result.divideBy(totApplicable);
		}
		if (scaleByPatristic.getValue()) {
			double minDistance = patDistances[target][0];
			double maxDistance = minDistance;
			for (int k = 1; k<patDistances[target].length; k++) {
				double kD = patDistances[target][k];
				if (kD<minDistance)
						minDistance = kD;
				else if (kD>maxDistance)
					maxDistance = kD;
			}
				double proportionalDistance =   (patDistances[target][it]-minDistance)/(maxDistance-minDistance);
				double multiplier =  1 + proportionalDistance;
				result.multiplyBy(multiplier);
		}
		if (useLogScale.getValue())
			if (!result.isUnassigned())
				result.setValue(Math.log10(result.getDoubleValue()));

		
		if (resultString!=null)
			resultString.setValue("SNPs matching all selected taxa: " + result.toString());
		saveLastResult(result);
		saveLastResultString(resultString);
	}

	/*.................................................................................................................*/
	MesquiteBoolean scaleByPatristic = new MesquiteBoolean(true);
	MesquiteBoolean useLogScale = new MesquiteBoolean(false);
	MesquiteInteger useProportion = new MesquiteInteger(0);

	public boolean getOptions(){
		MesquiteInteger buttonPressed = new MesquiteInteger(1);
		ExtensibleDialog dlog = new ExtensibleDialog(containerOfModule(), "Options to count SNP matches", buttonPressed);
		RadioButtons proportionOption = dlog.addRadioButtons (new String[] {"Raw count of matching SNPs", "Proportion of matching among non-gap sites"}, useProportion.getValue());
		dlog.addHorizontalLine(1);
		Checkbox logScale = dlog.addCheckBox("Log transform count", useLogScale.getValue());
		Checkbox scaleByPatristicDistance = dlog.addCheckBox("Scale by patristic distance", scaleByPatristic.getValue());

		dlog.completeAndShowDialog();

		boolean ok = (dlog.query()==0);
		if (ok) {
			scaleByPatristic.setValue(scaleByPatristicDistance.getState());
			useLogScale.setValue(logScale.getState());
			useProportion.setValue(proportionOption.getValue());
		}
		dlog.dispose();
		return ok;
	}	

	/*.................................................................................................................*/
	public Snapshot getSnapshot(MesquiteFile file) { 
		Snapshot temp = new Snapshot();
		temp.addLine("scaleByPatristic " + scaleByPatristic.toOffOnString());
		temp.addLine("useLogScale " + useLogScale.toOffOnString());
		temp.addLine("useProportion " + useProportion.getValue());
		return temp;
	}
	/*.................................................................................................................*/
	public Object doCommand(String commandName, String arguments, CommandChecker checker) {
		if (checker.compare(this.getClass(), "Sets whether to scale counts by patristic distance to taxon.", null, commandName, "scaleByPatristic")) {
			scaleByPatristic.toggleValue(parser.getFirstToken(arguments));
			parametersChanged();
		}
		else if (checker.compare(this.getClass(), "Sets whether to log transform counts.", null, commandName, "useLogScale")) {
			useLogScale.toggleValue(parser.getFirstToken(arguments));
			parametersChanged();
		}
		else if (checker.compare(this.getClass(), "Sets whether to use proportion of non-gaps rather than raw counts of matches.", null, commandName, "useProportion")) {
			useProportion.setValue(parser.getFirstToken(arguments));
			parametersChanged();
		}
		else if (checker.compare(this.getClass(), "Sets options for counting of SNP matches.", null, commandName, "setOptions")) {
			if (getOptions())
				parametersChanged();
		}

		else
			return  super.doCommand(commandName, arguments, checker);
		return null;
	}

	/*.................................................................................................................*/
	/** Returns CompatibilityTest so other modules know if this is compatible with some object. */
	public CompatibilityTest getCompatibilityTest(){
		return new RequiresAnyCategoricalData();
	}
	/*.................................................................................................................*/
	public void employeeParametersChanged(MesquiteModule employee, MesquiteModule source, Notification notification) {
		observedStates = null;
		super.employeeParametersChanged(employee, source, notification);
	}
	/*.................................................................................................................*/
	public String getName() {
		return "Number SNPs shared with selected taxon";  
	}

		public String getParameters() {
		return "Number of states matching those of taxon \"" + taxonName +"\" in matrix from: " + matrixSourceTask.getParameters();
	}
	/*.................................................................................................................*/

	/** returns an explanation of what the module does.*/
	public String getExplanation() {
		return "Reports the the number of states matching selected taxon among polymorphic sites for a data matrix." ;
	}
	/** returns the version number at which this module was first released.  If 0, then no version number is claimed.  If a POSITIVE integer
	 * then the number refers to the Mesquite version.  This should be used only by modules part of the core release of Mesquite.
	 * If a NEGATIVE integer, then the number refers to the local version of the package, e.g. a third party package*/
	public int getVersionOfFirstRelease(){
		return NEXTRELEASE;  
	}

}




