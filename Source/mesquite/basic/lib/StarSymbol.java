/* Mesquite.cartographer source code.  Copyright 2008-2009 D. Maddison and W. Maddison. Version 1.3, June 2008.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.basic.lib;import java.awt.*;import java.awt.geom.Path2D;import mesquite.lib.*;import mesquite.lib.taxa.*;import mesquite.lib.tree.*;import mesquite.lib.ui.*;/* ======================================================================== */public class StarSymbol extends FillableMesquiteSymbol  {	int nPoints = 5;	IntegerField pointsField;	public StarSymbol() {	}	/*.................................................................................................................*/	/**gets the name of the symbol*/	public String getName(){		return "Star";	}	/*.................................................................................................................*/	/**gets whether the symbol is drawn via a Polygon*/	public boolean getIsPolygon(){		return true;	}	/*.................................................................................................................*/	public int getNPoints(){		return nPoints;	}	/*.................................................................................................................*/	public void setNPoints(int nPoints){		this.nPoints = nPoints;	}	/*.................................................................................................................*/	public void  setToCloned(MesquiteSymbol cloned){		super.setToCloned(cloned);		setNPoints(((StarSymbol)cloned).getNPoints());	}	/*.................................................................................................................*/	public  MesquiteSymbol  cloneMethod(){		StarSymbol newSymbol = new StarSymbol();		newSymbol.setToCloned(this);		return  newSymbol;	}	/*.................................................................................................................*/	/**gets the NEXUS commands to specify the options specific to this tool*/	public String getExtraNexusOptions(){		return " POINTS=" + nPoints +  " ";	}	/*.................................................................................................................*/	public void addDialogElements(ExtensibleDialog dialog, boolean includeSize){		super.addDialogElements(dialog,includeSize);		pointsField = dialog.addIntegerField("Points: ", nPoints,4);	}	/*.................................................................................................................*/	public void getDialogOptions(){		super.getDialogOptions();		nPoints = pointsField.getValue();	}	/*.................................................................................................................*/	public void processSubcommand(String token, Parser subcommands){		super.processSubcommand(token, subcommands);		if (token.equalsIgnoreCase("POINTS")){			token = subcommands.getNextToken(); //=			int symPoints = MesquiteInteger.fromString(subcommands.getNextToken());			if (MesquiteInteger.isCombinable(symPoints))				nPoints=symPoints;		}	}	/*.................................................................................................................*/	/**gets the Polygon*/	public Path2D.Double getPolygon(int maxSize){		double radius = getSize();		if (maxSize<radius && maxSize>0)			radius = 1.0*maxSize;		double angle = -90;		double angleIncrement = 180.0/((double)nPoints);		int startX = (int)Math.round(radius*Math.cos(angle/180.0*Math.PI));		int startY = (int)Math.round(radius*Math.sin(angle/180.0*Math.PI));		int newX, newY;		int oldX, oldY;		int newNearX, newNearY;		Path2D.Double star =new Path2D.Double();		star.reset();		star.moveTo(startX, startY);		for (int i = 1; i <= nPoints; i++) {			angle += angleIncrement;			newNearX = (int)Math.round(radius*Math.cos(angle/180.0*Math.PI)*(1.0- 3.0/nPoints));  			newNearY = (int)Math.round(radius*Math.sin(angle/180.0*Math.PI)* (1.0- 3.0/nPoints));  			star.lineTo(newNearX, newNearY);			angle += angleIncrement;			newX = (int)Math.round(radius*Math.cos(angle/180.0*Math.PI));			newY = (int)Math.round(radius*Math.sin(angle/180.0*Math.PI));			star.lineTo(newX, newY);		}		star.closePath();		return star;	}}