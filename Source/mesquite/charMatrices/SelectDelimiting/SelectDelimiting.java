/* Mesquite source code.  Copyright 1997 and onward, W. Maddison and D. Maddison. 
Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.charMatrices.SelectDelimiting;/*~~  */import mesquite.lib.MesquiteListener;
import mesquite.lib.Notification;
import mesquite.lib.characters.CharacterData;
import mesquite.lib.characters.CharacterState;
import mesquite.lib.duties.CharacterSelector;
import mesquite.lib.taxa.Taxa;/* ======================================================================== */public class SelectDelimiting extends CharacterSelector {	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, boolean hiredByName) {		return true;	}		/*.................................................................................................................*/   	 public boolean isPrerelease(){   	 	return false;   	 }	/*.................................................................................................................*/	/** returns whether this module is requesting to appear as a primary choice */   	public boolean requestPrimaryChoice(){   		return false;     	}	boolean withStateDistinguishingSelectedTaxa(Taxa taxa, CharacterData data, int ic){		CharacterState fcs = null;		CharacterState cs = null;		boolean first = true;				//first see if the selected taxa are uniform. They need to be an exact match		boolean somethingThere = false;		for (int it = 0; it<taxa.getNumTaxa(); it++) {			if (taxa.getSelected(it)){					if (first)						fcs =  data.getCharacterState(null, ic, it);					first = false;					cs = data.getCharacterState(cs, ic, it);					somethingThere = true;					if (!cs.equals(fcs))						return false;
			}		}				if (!somethingThere)			return false;		somethingThere = false;				//second see if the all other taxa are different		for (int it = 0; it<taxa.getNumTaxa(); it++) {			if (!taxa.getSelected(it))					cs = data.getCharacterState(cs, ic, it);					somethingThere = true;					if (cs.couldBeEqual(fcs))						return false;				}		if (!somethingThere)			return false;		return true;	}		   	/** Called to select characters*/   	public void selectCharacters(CharacterData data){   		if (data!=null && data.getNumChars()>0){   			Taxa taxa = data.getTaxa();   			if (!taxa.anySelected())   				return;   			for (int i=0; i<data.getNumChars(); i++) {   				if (withStateDistinguishingSelectedTaxa(taxa, data, i)) {   					data.setSelected(i, true);   				}   			}   			data.notifyListeners(this, new Notification(MesquiteListener.SELECTION_CHANGED));   		}   	}	/*.................................................................................................................*/    	 public String getName() {		return "With State Distinguishing Selected Taxa";   	 }	/*.................................................................................................................*/ 	/** returns an explanation of what the module does.*/ 	public String getExplanation() { 		return "Selects characters that have a character state that is unique to and uniform in the selected taxa, as possible synapomorphic or diagnostic states for the set of taxa." ;   	 }   	 }