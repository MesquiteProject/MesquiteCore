/* Mesquite source code.  Copyright 1997 and onward, W. Maddison and D. Maddison. 


Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. 
The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.
Perhaps with your help we can be more than a few, and make Mesquite better.

Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.
Mesquite's web site is http://mesquiteproject.org

This source code and its compiled class files are free and modifiable under the terms of 
GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)
 */
package mesquite.charMatrices.NumForTaxonWMatrix;
/*~~  */

import java.util.*;
import java.awt.*;

import mesquite.lib.*;
import mesquite.lib.characters.*;
import mesquite.lib.duties.*;
import mesquite.lib.taxa.Taxa;
import mesquite.lib.taxa.Taxon;
import mesquite.categ.lib.*;

/* ======================================================================== */
public class NumForTaxonWMatrix extends NumberForTaxon {
	public void getEmployeeNeeds(){  //This gets called on startup to harvest information; override this and inside, call registerEmployeeNeed
		EmployeeNeed e = registerEmployeeNeed(MatrixSourceCoord.class, getName() + "  needs a source of sequences.",
				"The source of characters is arranged initially");
		registerEmployeeNeed(NumberForTaxonAndMatrix.class, getName() + "  needs a calculator of the number for the taxon and matrix.",
				"The calculator is arranged initially");
	}
	MatrixSourceCoord matrixSourceTask;
	Taxa currentTaxa = null;
	MCharactersDistribution observedStates =null;
	NumberForTaxonAndMatrix numberTask;
	/*.................................................................................................................*/
	public boolean startJob(String arguments, Object condition, boolean hiredByName) {
		if (arguments ==null)
			numberTask = (NumberForTaxonAndMatrix)hireEmployee(NumberForTaxonAndMatrix.class, "Number for taxon with matrix");
		else {
			numberTask = (NumberForTaxonAndMatrix)hireNamedEmployee(NumberForTaxonAndMatrix.class, arguments);
			if (numberTask == null)
				numberTask = (NumberForTaxonAndMatrix)hireEmployee(NumberForTaxonAndMatrix.class, "Number for taxon with matrix");
		}
		if (numberTask == null) {
			return sorry(getName() + " couldn't start because no number calculator was obtained.");
		}

		matrixSourceTask = (MatrixSourceCoord)hireCompatibleEmployee(MatrixSourceCoord.class, MolecularState.class, "Source of character matrix (for " + getName() + ")"); 
		if (matrixSourceTask==null)
			return sorry(getName() + " couldn't start because no source of character matrices was obtained.");
		return true;
	}
	public  Class getHireSubchoice(){
		return NumberForTaxonAndMatrix.class;
	}

	/*.................................................................................................................*/
	public Snapshot getSnapshot(MesquiteFile file) {
		Snapshot temp = new Snapshot();
		temp.addLine("numberTask", numberTask); 
		temp.addLine("getMatrixSource", matrixSourceTask);
		return temp;
	}
	/*.................................................................................................................*/
	String[] legacyNfTCommands = new String[] {"toggleCountExcluded", "toggleCountMissing", "toggleEdges", "toggleCountEvenIfOthers"};
	/*.................................................................................................................*/
	public Object doCommand(String commandName, String arguments, CommandChecker checker) {
		if (checker.compare(this.getClass(), "Sets calculator module", "[name of module]", commandName, "numberTask")) {
			NumberForTaxonAndMatrix temp = (NumberForTaxonAndMatrix)replaceEmployee(NumberForTaxonAndMatrix.class, arguments, "Number for taxon with matrix", numberTask);
			if (temp !=null){
				numberTask = temp;
				return temp;
			}
		}
		else if (checker.compare(this.getClass(), "Returns the matrix source", null, commandName, "getMatrixSource")) {
			return matrixSourceTask;
		}
		else	if (numberTask!= null && StringArray.indexOf(legacyNfTCommands, commandName)>=0) {
			return numberTask.doCommand(commandName, arguments, checker);
	}
		else
			return  super.doCommand(commandName, arguments, checker);
		return null;
	}
	/*.................................................................................................................*/
	/** Generated by an employee who quit.  The MesquiteModule should act accordingly. */
	public void employeeQuit(MesquiteModule employee) {
		if (employee == matrixSourceTask)  // character source quit and none rehired automatically
			iQuit();
	}
	/*.................................................................................................................*/
	public void employeeParametersChanged(MesquiteModule employee, MesquiteModule source, Notification notification) {
		observedStates = null;
		super.employeeParametersChanged(employee, source, notification);
	}
	/*.................................................................................................................*/
	/** returns whether this module is requesting to appear as a primary choice */
	public boolean requestPrimaryChoice(){
		return true;  
	}

	/** Called to provoke any necessary initialization.  This helps prevent the module's initialization queries to the user from
   	happening at inopportune times (e.g., while a long chart calculation is in mid-progress)*/
	public void initialize(Taxa taxa){
		currentTaxa = taxa;
		matrixSourceTask.initialize(currentTaxa);
		observedStates = matrixSourceTask.getCurrentMatrix(taxa);
	}

	public  void calculateNumber(Taxon taxon, MesquiteNumber result, MesquiteString resultString){
		if (result==null)
			return;
		result.setToUnassigned();
		clearResultAndLastResult(result);
		Taxa taxa = taxon.getTaxa();
		int it = taxa.whichTaxonNumber(taxon);
		if (taxa != currentTaxa || observedStates == null ) {
			observedStates = matrixSourceTask.getCurrentMatrix(taxa);
			currentTaxa = taxa;
		}
		if (observedStates==null)
			return;
		numberTask.calculateNumber(taxon, observedStates, result, resultString);

		if (resultString!=null)
			resultString.setValue("Number for matrix "+ observedStates.getName()  + ": " + result.toString());
		saveLastResult(result);
		saveLastResultString(resultString);
	}
	/*.................................................................................................................*/
	public String getName() {
		return "Number for Taxon with Matrix";
	}
	/*.................................................................................................................*/
	public String getVeryShortName() {
		if (numberTask != null) { 
			String s = numberTask.getVeryShortName();
			if (observedStates != null && getProject().getNumberCharMatricesVisible()>1) {
				if (observedStates.getName()!= null) {
					String n =  observedStates.getName();
					if (n.length()>12)
						n = n.substring(0, 12) + "â€¦"; 
					s += " (" + n + ")";
				}
			}
			return s;
		}
		return "# for Taxon & Matrix";
	}
	/*.................................................................................................................*/
	public String getNameForMenuItem() {
		return "Number with Matrix...";
	}

	/*.................................................................................................................*/
	public boolean isPrerelease() {
		return true;
	}
	public String getParameters() {
		if (numberTask == null)
			return null;
		return numberTask.getParameters();
	}
	/*.................................................................................................................*/

	/** returns an explanation of what the module does.*/
	public String getExplanation() {
		return "Supplies a number for a taxon and a matrix." ;
	}

}




